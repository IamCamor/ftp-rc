#!/usr/bin/env bash
set -euo pipefail

FRONTEND_DIR="frontend"
SRC="$FRONTEND_DIR/src"

[ -d "$SRC" ] || { echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ $SRC (–∑–∞–ø—É—Å—Ç–∏ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)"; exit 1; }

# 1) –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º src/api.ts –ø–æ–¥ /api/v1 –∏ —è–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
cat > "$SRC/api.ts" <<'TS'
import cfgDefault, { config as cfgNamed } from './config';

const cfg = (cfgNamed ?? cfgDefault);

/** –ë–∞–∑–æ–≤—ã–π fetch —Å –æ–±—â–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏/–∫—É–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ */
async function http<T = any>(path: string, init: RequestInit = {}): Promise<T> {
  const base = cfg.apiBase?.replace(/\/+$/,'') || '';
  const url  = `${base}${path.startsWith('/') ? '' : '/'}${path}`;
  const headers: HeadersInit = {
    Accept: 'application/json',
    ...(init.body ? {'Content-Type':'application/json'} : {}),
    ...(init.headers || {}),
  };
  const res = await fetch(url, {
    method: init.method ?? 'GET',
    credentials: 'include',             // –≤–∞–∂–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏
    headers,
    body: init.body as any,
  });

  // –ò–Ω–æ–≥–¥–∞ –±–µ–∫ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å 204 –±–µ–∑ —Ç–µ–ª–∞
  if (res.status === 204) return undefined as any;

  let data: any = null;
  const text = await res.text();
  try { data = text ? JSON.parse(text) : null; } catch { data = text; }

  if (!res.ok) {
    const msg = (data && (data.message || data.error)) || res.statusText;
    const err: any = new Error(`HTTP ${res.status}: ${msg}`);
    err.status = res.status;
    err.data = data;
    throw err;
  }
  return data as T;
}

/** –õ–µ–Ω—Ç–∞ */
export async function feed(params: { limit?: number; offset?: number } = {}) {
  const q = new URLSearchParams();
  if (params.limit  != null) q.set('limit',  String(params.limit));
  if (params.offset != null) q.set('offset', String(params.offset));
  return http<{ items: any[]; nextOffset?: number }>(`/feed?${q.toString()}`);
}

/** –¢–æ—á–∫–∏ –∫–∞—Ä—Ç—ã */
export async function points(params: { limit?: number; bbox?: string; filter?: string } = {}) {
  const q = new URLSearchParams();
  if (params.limit  != null) q.set('limit',  String(params.limit));
  if (params.bbox)           q.set('bbox',   params.bbox);
  if (params.filter)         q.set('filter', params.filter);
  return http<any[]>(`/map/points?${q.toString()}`);
}

/** –ü—Ä–æ—Ñ–∏–ª—å */
export async function getProfile() {
  return http(`/profile/me`);
}

/** –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
export async function getNotifications() {
  return http<any[]>(`/notifications`);
}

/** –î–µ—Ç–∞–ª—å —É–ª–æ–≤–∞ */
export async function getCatchById(id: string|number) {
  return http(`/catch/${id}`);
}

/** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–ª–æ–≤—É */
export async function addComment(catchId: string|number, payload: { text: string }) {
  return http(`/catch/${catchId}/comments`, {
    method: 'POST',
    body: JSON.stringify(payload),
  });
}

/** –°–æ–∑–¥–∞—Ç—å –º–µ—Å—Ç–æ */
export async function addPlace(payload: {
  lat: number; lng: number; title: string; description?: string; photos?: string[];
}) {
  return http(`/points`, { method:'POST', body: JSON.stringify(payload) });
}

/** –°–æ–∑–¥–∞—Ç—å —É–ª–æ–≤ */
export async function addCatch(payload: {
  lat: number; lng: number; species?: string; length?: number; weight?: number;
  method?: string; bait?: string; gear?: string; caption?: string; photo_url?: string;
  caught_at?: string; privacy?: 'all'|'friends'|'private';
}) {
  return http(`/catch`, { method:'POST', body: JSON.stringify(payload) });
}

/** –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ (—Ö—Ä–∞–Ω–∏–º –Ω–∞ –±–µ–∫/–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî —Ñ—Ä–æ–Ω—Ç –ø—Ä–æ–∑—Ä–∞—á–µ–Ω) */
export async function getWeatherFavs() {
  try {
    return await http<{ id:string; lat:number; lng:number; name:string }[]>(`/weather/favs`);
  } catch (e:any) {
    // fallback –Ω–∞ localStorage, –µ—Å–ª–∏ –µ–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–µ—Ç
    const raw = localStorage.getItem('weather_favs') || '[]';
    return JSON.parse(raw);
  }
}
export async function saveWeatherFav(fav: { id?:string; lat:number; lng:number; name:string }) {
  try {
    return await http(`/weather/favs`, { method:'POST', body: JSON.stringify(fav) });
  } catch (e:any) {
    const list = await getWeatherFavs();
    const withId = { ...fav, id: fav.id || String(Date.now()) };
    const next = [withId, ...list.filter((x:any)=>x.id!==withId.id)];
    localStorage.setItem('weather_favs', JSON.stringify(next));
    return withId;
  }
}

/** –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API */
export async function ping() {
  try {
    // –µ—Å–ª–∏ –µ—Å—Ç—å /health ‚Äî –æ—Ç–ª–∏—á–Ω–æ, –∏–Ω–∞—á–µ –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥–ª—É—à–∫–∞ –∫ /feed —Å –Ω—É–ª–µ–≤—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    const res = await http(`/health`).catch(() => http(`/feed?limit=1&offset=0`));
    return { ok: true, res };
  } catch (e:any) {
    return { ok: false, error: e?.message || String(e) };
  }
}

export default {
  feed,
  points,
  getProfile,
  getNotifications,
  getCatchById,
  addComment,
  addPlace,
  addCatch,
  getWeatherFavs,
  saveWeatherFav,
  ping,
};
TS

echo "‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω $SRC/api.ts"

# 2) –í–∫–ª—é—á–∞–µ–º –ª—ë–≥–∫–∏–π fetch-–ª–æ–≥–≥–µ—Ä (—Ç–æ–ª—å–∫–æ –≤ dev) + –ø–æ–¥–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ main.tsx
mkdir -p "$SRC/utils"

cat > "$SRC/utils/fetchDebug.ts" <<'TS'
/**
 * –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä fetch –¥–ª—è dev.
 * –í –ø—Ä–æ–¥–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è (NODE_ENV !== 'development').
 */
if (import.meta && import.meta.env && import.meta.env.DEV) {
  const orig = window.fetch;
  window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
    const method = (init?.method || 'GET').toUpperCase();
    const url = typeof input === 'string' ? input : (input as URL).toString();
    // eslint-disable-next-line no-console
    console.debug('üõ∞Ô∏è fetch ‚Üí', method, url, init?.body ? 'with body' : '');
    const t0 = performance.now();
    try {
      const res = await orig(input, init);
      const dt = (performance.now() - t0).toFixed(0);
      // eslint-disable-next-line no-console
      console.debug('‚úÖ fetch ‚Üê', res.status, method, url, `${dt}ms`);
      return res;
    } catch (e:any) {
      const dt = (performance.now() - t0).toFixed(0);
      // eslint-disable-next-line no-console
      console.debug('‚ùå fetch √ó', method, url, `${dt}ms`, e?.message || e);
      throw e;
    }
  };
}
export {};
TS

# –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ main.tsx (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
MAIN="$SRC/main.tsx"
if [ -f "$MAIN" ]; then
  if ! grep -q "utils/fetchDebug" "$MAIN"; then
    # macOS-–ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞: —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    TMP="$(mktemp)"
    echo "import './utils/fetchDebug';" > "$TMP"
    cat "$MAIN" >> "$TMP"
    mv "$TMP" "$MAIN"
    echo "üîé –î–æ–±–∞–≤–ª–µ–Ω dev-–ª–æ–≥–≥–µ—Ä fetch –≤ $MAIN"
  fi
fi

echo "üéØ –ì–æ—Ç–æ–≤–æ. –¢–µ–ø–µ—Ä—å —Å–±–æ—Ä–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤:"
echo "   cd $FRONTEND_DIR && npm run dev   # dev: —Å–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å ‚Äî –¥–æ–ª–∂–Ω—ã –ø–æ–π—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã"
echo "   cd $FRONTEND_DIR && npm run build # prod: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏"