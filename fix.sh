#!/usr/bin/env bash
set -euo pipefail

API_FILE="frontend/src/api.ts"

if [ ! -f "$API_FILE" ]; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω $API_FILE ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞."
  exit 1
fi

cp "$API_FILE" "${API_FILE}.bak"
echo "üß∑ –ë—ç–∫–∞–ø: ${API_FILE}.bak"

need_newline() {
  # –î–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  tail -c1 "$API_FILE" | read -r _ || echo >> "$API_FILE"
}

# 1) –î–æ–±–∞–≤–∏–º catchById, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if grep -qE 'export\s+async\s+function\s+catchById\s*\(' "$API_FILE"; then
  echo "‚Ä¢ catchById() —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é."
else
  need_newline
  cat >> "$API_FILE" <<'TS'

// --- auto-added: catchById ---
/**
 * –ü–æ–ª—É—á–∏—Ç—å —É–ª–æ–≤ –ø–æ ID
 * GET /catch/{id}
 * –¢—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –≤ —Ñ–∞–π–ª–µ –≤—ã—à–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω `const base = config.apiBase`
 */
export async function catchById(id: number | string): Promise<any> {
  const url = `${base}/catch/${id}`;
  const token = (typeof localStorage !== 'undefined') ? localStorage.getItem('token') : null;
  const res = await fetch(url, {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
    },
    credentials: 'include',
  });
  if (!res.ok) {
    throw new Error(`catchById failed: ${res.status} ${res.statusText}`);
  }
  return res.json();
}
// --- /auto-added: catchById ---
TS
  echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω export catchById()"
fi

# 2) –î–æ–±–∞–≤–∏–º addCatchComment, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if grep -qE 'export\s+async\s+function\s+addCatchComment\s*\(' "$API_FILE"; then
  echo "‚Ä¢ addCatchComment() —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é."
else
  need_newline
  cat >> "$API_FILE" <<'TS'

// --- auto-added: addCatchComment ---
/**
 * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–ª–æ–≤—É
 * POST /catch/{id}/comments
 * –ë–µ–∫ –æ–∂–∏–¥–∞–µ—Ç JSON —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ß–∞—â–µ –≤—Å–µ–≥–æ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "text".
 */
export async function addCatchComment(
  catchId: number | string,
  text: string
): Promise<any> {
  const url = `${base}/catch/${catchId}/comments`;
  const token = (typeof localStorage !== 'undefined') ? localStorage.getItem('token') : null;

  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
    },
    credentials: 'include',
    body: JSON.stringify({ text }),
  });

  // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –±–µ–∫–µ —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "message"),
  // –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å fallback:
  if (res.status === 422) {
    // –ø–æ–ø—Ä–æ–±—É–µ–º "message" –≤–º–µ—Å—Ç–æ "text"
    const retry = await fetch(url, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
      },
      credentials: 'include',
      body: JSON.stringify({ message: text }),
    });
    if (!retry.ok) {
      const t = await retry.text().catch(() => '');
      throw new Error(`addCatchComment failed: ${retry.status} ${retry.statusText} ${t}`);
    }
    try { return await retry.json(); } catch { return { ok: true }; }
  }

  if (!res.ok) {
    const t = await res.text().catch(() => '');
    throw new Error(`addCatchComment failed: ${res.status} ${res.statusText} ${t}`);
  }
  try { return await res.json(); } catch { return { ok: true }; }
}
// --- /auto-added: addCatchComment ---
TS
  echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω export addCatchComment()"
fi

echo "üéØ –ì–æ—Ç–æ–≤–æ. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç:"
echo "   cd frontend && npm run build"